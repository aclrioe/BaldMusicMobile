{"ast":null,"code":"import axios from 'axios';\nimport qs from 'qs';\nvar serverUrl = process.env.NODE_ENV === 'development' ? 'https://www.easy-mock.com/mock/5c381e76b754282ba8185fff/baldmusic' : process.env.NODE_ENV === 'production' ? '正式接口' : \"http://localhost:\".concat(process.env.PORT || 3000);\naxios.defaults.baseURL = serverUrl;\naxios.defaults.timeout = 5000; // axios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\n// axios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n// \n\naxios.interceptors.request.use(function (config) {\n  // loading\n  return config;\n});\naxios.interceptors.response.use(function (res) {\n  // Do something with response data\n  return res;\n}, function (error) {\n  // Do something with res error\n  return Promise.reject(error);\n});\n\nvar fetch = function fetch(opts, data) {\n  var httpDefaultOpts = {\n    //http默认配置\n    method: opts.method,\n    url: opts.url,\n    timeout: 10000,\n    params: data,\n    data: qs.stringify(data),\n    headers: opts.method === 'get' ? {\n      'X-Requested-With': 'XMLHttpRequest',\n      \"Accept\": \"application/json\",\n      \"Content-Type\": \"application/json; charset=UTF-8\"\n    } : {\n      'X-Requested-With': 'XMLHttpRequest',\n      'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'\n    }\n  };\n\n  if (opts.method === 'get') {\n    delete httpDefaultOpts.data;\n  } else {\n    delete httpDefaultOpts.params;\n  }\n\n  var promise = new Promise(function (resolve, reject) {\n    axios(httpDefaultOpts).then(function (res) {\n      resolve(res);\n    }).catch(function (response) {\n      reject(response);\n    });\n  });\n  return promise;\n};\n\nexport default fetch;","map":{"version":3,"sources":["/Users/youn/Desktop/BaldMusic/src/api/http.js"],"names":["axios","qs","serverUrl","process","env","NODE_ENV","PORT","defaults","baseURL","timeout","interceptors","request","use","config","response","res","error","Promise","reject","fetch","opts","data","httpDefaultOpts","method","url","params","stringify","headers","promise","resolve","then","catch"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,EAAP,MAAe,IAAf;AACA,IAAMC,SAAS,GAAKC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAAzB,GACI,mEADJ,GAEAF,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GACI,MADJ,8BAEwBF,OAAO,CAACC,GAAR,CAAYE,IAAZ,IAAoB,IAF5C,CAFpB;AAKAN,KAAK,CAACO,QAAN,CAAeC,OAAf,GAAyBN,SAAzB;AACAF,KAAK,CAACO,QAAN,CAAeE,OAAf,GAAyB,IAAzB,C,CACA;AACA;AACA;;AACAT,KAAK,CAACU,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CAA+B,UAAAC,MAAM,EAAI;AACvC;AACA,SAAOA,MAAP;AACD,CAHD;AAIAb,KAAK,CAACU,YAAN,CAAmBI,QAAnB,CAA4BF,GAA5B,CAAgC,UAAUG,GAAV,EAAe;AAC3C;AACA,SAAOA,GAAP;AACD,CAHH,EAGK,UAAUC,KAAV,EAAiB;AAClB;AACA,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,CANH;;AAOA,IAAMG,KAAK,GAAG,SAARA,KAAQ,CAACC,IAAD,EAAOC,IAAP,EAAgB;AAC1B,MAAIC,eAAe,GAAG;AAAE;AAClBC,IAAAA,MAAM,EAACH,IAAI,CAACG,MADI;AAEhBC,IAAAA,GAAG,EAAEJ,IAAI,CAACI,GAFM;AAGhBf,IAAAA,OAAO,EAAE,KAHO;AAIhBgB,IAAAA,MAAM,EAACJ,IAJS;AAKhBA,IAAAA,IAAI,EAACpB,EAAE,CAACyB,SAAH,CAAaL,IAAb,CALW;AAMhBM,IAAAA,OAAO,EAAEP,IAAI,CAACG,MAAL,KAAgB,KAAhB,GAAsB;AAC7B,0BAAoB,gBADS;AAE7B,gBAAU,kBAFmB;AAG7B,sBAAgB;AAHa,KAAtB,GAIP;AACA,0BAAoB,gBADpB;AAEA,sBAAgB;AAFhB;AAVc,GAAtB;;AAgBA,MAAGH,IAAI,CAACG,MAAL,KAAgB,KAAnB,EAAyB;AACvB,WAAOD,eAAe,CAACD,IAAvB;AACD,GAFD,MAEK;AACH,WAAOC,eAAe,CAACG,MAAvB;AACD;;AAED,MAAIG,OAAO,GAAG,IAAIX,OAAJ,CAAY,UAASY,OAAT,EAAkBX,MAAlB,EAA0B;AAClDlB,IAAAA,KAAK,CAACsB,eAAD,CAAL,CAAuBQ,IAAvB,CACE,UAACf,GAAD,EAAS;AACPc,MAAAA,OAAO,CAACd,GAAD,CAAP;AACD,KAHH,EAIEgB,KAJF,CAKE,UAACjB,QAAD,EAAc;AACZI,MAAAA,MAAM,CAACJ,QAAD,CAAN;AACD,KAPH;AAUD,GAXa,CAAd;AAYF,SAAOc,OAAP;AACD,CApCD;;AAqCA,eAAeT,KAAf","sourcesContent":["import axios from 'axios';\nimport qs from 'qs';\nconst serverUrl =   process.env.NODE_ENV === 'development' ? \n                        'https://www.easy-mock.com/mock/5c381e76b754282ba8185fff/baldmusic' :\n                    process.env.NODE_ENV === 'production' ?\n                        '正式接口' :\n                        `http://localhost:${process.env.PORT || 3000}`\naxios.defaults.baseURL = serverUrl;\naxios.defaults.timeout = 5000;\n// axios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\n// axios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n// \naxios.interceptors.request.use(config => {\n  // loading\n  return config\n})\naxios.interceptors.response.use(function (res) {\n    // Do something with response data\n    return res;\n  }, function (error) {\n    // Do something with res error\n    return Promise.reject(error);\n  });\nconst fetch = (opts, data) => {\n    let httpDefaultOpts = { //http默认配置\n          method:opts.method,\n          url: opts.url,\n          timeout: 10000,\n          params:data,\n          data:qs.stringify(data),\n          headers: opts.method === 'get'?{\n            'X-Requested-With': 'XMLHttpRequest',\n            \"Accept\": \"application/json\",\n            \"Content-Type\": \"application/json; charset=UTF-8\"\n          }:{\n            'X-Requested-With': 'XMLHttpRequest',\n            'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'\n          }\n    }\n \n    if(opts.method === 'get'){\n      delete httpDefaultOpts.data\n    }else{\n      delete httpDefaultOpts.params\n    }\n    \n    let promise = new Promise(function(resolve, reject) {\n      axios(httpDefaultOpts).then(\n        (res) => {\n          resolve(res)\n        }\n      ).catch(\n        (response) => {\n          reject(response)\n        }\n      )\n \n    })\n  return promise\n}\nexport default fetch;"]},"metadata":{},"sourceType":"module"}